#Test with: http://editor.swagger.io/

swagger: '2.0'
info:
  version: 1.0.0
  title: Microservice for Authentication
  description: Django + PostgreSQL
  license:
    name: Software Architecture, 2020-I
host: localhost:8000
basePath: /auth/
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /login/:          
    post:
      summary: gets username (email) and password to get access and refresh tokens
      operationId: login
      parameters:
        - name: user
          in: body
          required: true
          description: User Object
          schema:
            $ref: '#/definitions/LoginInput'
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/Tokens'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
  /login/refresh/:          
    post:
      summary: Get a new access token with the refresh token 
      operationId: refresh 
      parameters:
        - name: refresh token
          in: body
          required: true
          description: Token
          schema:
            $ref: '#/definitions/RefreshToken'
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/AccessToken'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
  /login/verify/:          
    post:
      summary: Verifies the access token
      operationId: verify
      parameters:
        - name: access
          in: body
          required: true
          description: Token
          schema:
            $ref: '#/definitions/VerifyToken'
      responses:
        '200':
          description: Ok
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
  /register/:          
    post:
      summary: To create a new user
      operationId: register
      parameters:
        - name: user
          in: body
          required: true
          description: User Object
          schema:
            $ref: '#/definitions/RegisterInput'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/RegisterInput'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'        

definitions:

  RegisterInput:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
        
  LoginInput:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
  Tokens:
    type: object
    properties:
      refresh:
        type: string
      access:
        type: string
        
  RefreshToken:
    type: object
    properties:
      refresh:
        type: string
        
  AccessToken:
    type: object
    properties:
      access:
        type: string
  VerifyToken:
    type: object
    properties:
      token:
        type: string

# Errors
  ErrorModel:
    type: object
    required:
      - message
      - code
    properties:
      message:
        type: string
      code:
        type: string
